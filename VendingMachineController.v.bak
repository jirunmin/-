module VendingMachineController (
    input wire clk,
    input wire coin_insert_button,
    input wire confirm_button,
    input wire [3:0] coin_code,
    input wire [3:0] product_code,
    output reg alarm,
    output reg [3:0] change,
    output reg product_dispensed
);

reg [3:0] total_sales = 0;
reg [3:0] coin_total = 0;
reg [1:0] state = 2'b00;

always @(posedge clk) begin
    case (state)
        2'b00: begin // Initial state
            if (coin_insert_button) begin
                state <= 2'b01; // Move to coin insert state
                coin_total <= coin_code;
            end
        end
        2'b01: begin // Coin insert state
            if (coin_insert_button) begin
                coin_total <= coin_total + coin_code;
            end
            if (confirm_button) begin
                if (coin_total >= product_code) begin
                    total_sales <= total_sales + product_code;
                    change <= coin_total - product_code;
                    product_dispensed <= 1'b1;
                    state <= 2'b10; // Move to success state
                end else begin
                    alarm <= 1'b1;
                    state <= 2'b11; // Move to alarm state
                end
            end
        end
        2'b10: begin // Success state
            if (confirm_button) begin
                coin_total <= 0;
                state <= 2'b00; // Move back to initial state
            end
        end
        2'b11: begin // Alarm state
            if (!confirm_button) begin
                alarm <= 1'b0;
                state <= 2'b00; // Move back to initial state
            end
        end
    endcase
end

endmodule
